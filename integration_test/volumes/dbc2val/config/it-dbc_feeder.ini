########################################################################
# Copyright (c) 2022 Robert Bosch GmbH
#
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
########################################################################

[general]
# server type:
# switch between kuksa_databroker and kuksa_val_server
# default kuksa_val_server
#server_type = kuksa_val_server
server_type = kuksa_databroker
# VSS mapping file
mapping = mapping/vss_4.0/vss_dbc.json

# Same configs used for KUKSA.val Server and Databroker
# Note that default values below corresponds to Databroker
# Default values for KUKSA.val Server is commented below

# IP address for server (KUKSA.val Server or Databroker)
ip = 127.0.0.1
# ip = localhost

# Port for server (KUKSA.val Server or Databroker)
port = 55555
# port = 8090

# Shall TLS be used (default False for Databroker, True for KUKSA.val Server)
tls = False
# tls = True

# TLS-related settings
# Path to root CA, needed if using TLS
root_ca_path=../../kuksa.val/kuksa_certificates/CA.pem
# Server name, typically only needed if accessing server by IP address like 127.0.0.1
# and typically only if connection to KUKSA.val Databroker
# If using KUKSA.val example certificates the names "Server" or "localhost" can be used.
# tls_server_name=localhost

# Token file for authorization.
# Default behavior differ between servers
# For KUKSA.val Databroker the KUKSA.val default token not included in packages and containers
# If you run your Databroker so it require authentication you must specify token
# The example below works if you have cloned kuksa.val in parallel to kuksa.val.feeders
# token=../../kuksa.val/jwt/provide-all.token
# For KUKSA.val Server the default behavior is to use the token provided as part of kuksa-client
# So you only need to specify a different token if you want to use a different token
# Possibly like below
# token=../../kuksa.val/kuksa_certificates/jwt/super-admin.json.token

# Definitions on what directions to support.
# Default is from CAN to KUKSA (dbc2val) only.
# Note however that a mapping also is required, so if you do not have any val2dbc mapping, then the val2dbc config
# does not matter
dbc2val = True
# Note that to enable val2dbc you must use SocketCAN, you cannot use candumpfile
val2dbc = False

[can]
# CAN port, use elmcan to start the elmcan bridge
port = vcan0
#port = elmcan
# Enable SAE-J1939 Mode. False: ignore
j1939 = False
# DBC file used to parse CAN messages
dbcfile = Model3CAN.dbc
# Usage of the SocketCAN or virtual CAN replay with a dumpfile
# candumpfile not specified (commented out) = use SocketCAN (real or virtual provided by linux)
# candumpfile specified = use internal canplayer (no SocketCAN dependency)
candumpfile = candump.log

# JSON file containing default values for dbc signals
# Currently only used in val2dbc mode to populate dbc signals which either has no VSS mapping or where
# KUKSA.val not yet has a valid value
# Values (default or actual) must exist for all DBC signals in CAN frames sent.
dbc_default_file = dbc_default_values.json

[elmcan]
# Config for CAN port is \"elmcan\"
# Serial port where ELM is connected.
port = /dev/ttyAMA0
# Baudrate to ELM
baud = 2000000
# Acknowledge CAN messages
canack = false
# CAN bus speed
speed = 500000
